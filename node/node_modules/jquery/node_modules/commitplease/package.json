{
  "name": "commitplease",
  "version": "2.0.0",
  "description": "Validates strings as commit messages",
  "main": "index.js",
  "scripts": {
    "install": "node install",
    "uninstall": "node uninstall",
    "test": "jshint lib/ *.js && jscs lib/ *.js && nodeunit test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jzaefferer/commitplease.git"
  },
  "keywords": [
    "commit",
    "message",
    "validation"
  ],
  "author": {
    "name": "Jörn Zaefferer",
    "url": "http://bassistance.de"
  },
  "license": "MIT",
  "devDependencies": {
    "nodeunit": "0.8.2",
    "jshint": "2.5.6",
    "jscs": "1.7.3"
  },
  "dependencies": {
    "chalk": "0.4.0",
    "mout": "0.8.0",
    "semver": "2.2.1"
  },
  "readme": "# Commitplease\n\n[![Build Status](https://secure.travis-ci.org/jzaefferer/commitplease.png)](http://travis-ci.org/jzaefferer/commitplease)\n\nThis [node.js](http://nodejs.org/) module validates git commit messages while you commit, according to the rules specified in the [jQuery Commit Guidlines](http://contribute.jquery.org/commits-and-pull-requests/#commit-guidelines). These are pretty generic, so this module should be useful for most projects that care about commit message formats.\n\n## Installation\n\n```js\nnpm install commitplease\n```\n\nA git version of 1.8.5 or newer is recommended. If you use `git commit --verbose`, it is required.\n\n## Usage\n\nJust commit as usual. This modules installs a git commit-msg hook, automatically validating all commit messages as you enter them. Invalid messages will be rejected, with details on what's wrong and a copy of the input.\n\nBy default, the commit message needs to match the [jQuery Commit Guidlines](http://contribute.jquery.org/commits-and-pull-requests/#commit-guidelines). See there for details, and below on how to change the default behaviour.\n\nIn addition, a subject (the first line) starting with \"fixup!\" and \"squash!\" is considered valid. These are generated by `git commit --fixup` and `--squash`. A component in square brackets like \"[Tmp]\" or \"[fix]\" is also considered valid, to be manually squashed later.\n\n## API\n\n*The API is a work-in-progress*\n\n```js\nvar validate = require('commitplease/lib/validate');\nvar errors = validate(commit.message);\nif (errors.length) {\n\tpostComment('This commit has ' + errors.length + ' problems!');\n}\n```\n\n`validate(message[, options])`, returns `Array`\n\n* `message` (`String`): The commit message to validate. Must use LF (`\\n`) as line breaks.\n* `options` (`Object`, optional): Use this to override the default settings, see properties and defaults below\n* returns `Array`: Empty for valid messages, one or more items as `String` for each problem found\n\nOptions and their defaults:\n\n```js\ncomponent: true,\ncomponents: [],\nlimits: {\n\tsubject: 72,\n\tother: 80\n}\n```\n\n* `component`: The default `true` requires a component, set to `false` to skip the check.\n* `components`: A list of valid components. When a component is found, it's compared to the ones specified in this array.\n* `limits`: Line length limits, for subject and other lines.\n\n### Customizing the bundled options\n\nThe validation options can be overriden by configuring the `commitplease` property on your own project's `package.json`. This allows you to customize the validation rules.\n\nHere's an example for specifiying what components are valid:\n\n```json\n{\n  \"name\": \"Example\",\n  \"description\": \"An example project with custom commit hook options\",\n  \"devDependencies\": {\n    \"commitplease\": \"1.10.x\"\n  },\n  \"commitplease\": {\n    \"components\": [ \"Build\", \"Test\", \"Core\", \"Legacy\" ]\n  }\n}\n```\n\n\n## License\nCopyright 2014 Jörn Zaefferer. Released under the terms of the MIT license.\n\n---\n\nSupport this project by [donating on Gratipay](https://gratipay.com/jzaefferer/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jzaefferer/commitplease/issues"
  },
  "_id": "commitplease@2.0.0",
  "dist": {
    "shasum": "4bbade345adce7398d5519b8024de08f62f0a70d"
  },
  "_from": "commitplease@2.0.0",
  "_resolved": "https://registry.npmjs.org/commitplease/-/commitplease-2.0.0.tgz"
}
